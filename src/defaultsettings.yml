# Default settings for the bot
# DO NOT EDIT THIS FILE -- MAKE CUSTOMIZATIONS IN YOUR botconfig.yml FILE INSTEAD
# See https://ww.chat/config for more information, including valid options -- that page is automatically
# generated from the documentation specified here, and is much more human-readable than this file.
# This file has different formatting from botconfig.yml; you cannot expect to copy/paste things over correctly.

transports:
  _desc: |
    The transports section defines all of the connections your bot will make.
    At least one transport must be defined for the bot to successfully run.
    At the moment, exactly one transport must be defined, and that transport must be an IRC transport.
  _type: list
  _default: []
  _items:
    _type: tagged
    _tags:
      irc: transports.irc

transports.irc:
  _desc: A connection to an IRC network. The network must have some notion or support of accounts separate from nicks.
  _type: dict
  _default:
    name:
      _desc: Name of this transport. Can be anything, but must be defined and unique across all transports in this file.
      _type: str
    module:
      _desc: |
        What IRCd the remote is running. Configuring this wrong may have disastrous consequences.
        If you do not see a module for your ircd, please use "generic"; some lykos features will be disabled.
        If you notice bugs with the generic module with your ircd, please contact the lykos developers.
      _type: enum
      _default: generic
      _values:
        - hybrid
        - generic
        - seven
        - unreal
    user:
      _desc: Configures the bot user for this connection.
      _type: dict
      _default:
        nick:
          _desc: |
            The bot's nickname. If already taken, we may attempt to recover this depending on what services
            module was selected.
          _type: str
        ident:
          _desc: The bot's ident. If unset, defaults to the bot's nickname.
          _type:
            - str
            - null
          _default: ~
        realname:
          _desc: The bot's realname (gecos). If unset, defaults to the bot's nickname.
          _type:
            - str
            - null
          _default: ~
        command_prefix:
          _desc: |
            We only respond to commands in-channel if they begin with this prefix.
            Commands in private with this prefix are not relayed to other players in wolfchat, deadchat, etc.
            Use quotes around the character to prevent YAML from interpreting it as something special.
          _type: str
          _default: "!"
    channels:
      _desc: Channels that the bot will join upon startup.
      _type: dict
      _default:
        main:
          _desc: Main game channel. Be sure to use quotes around the name so it is not treated as a comment!
          _type:
            - transports.irc.channel
            - str
        alternate:
          _desc: |
            Alternate channels. The bot will join these and respond to some commands, but games cannot be played here.
            If you define IRC channels as logging targets, those channels will need to be listed here as well.
          _type: list
          _default: []
          _items:
            _type:
              - transports.irc.channel
              - str
    connection:
      _desc: Describes details of how the bot connects to the IRC network.
      _type: dict
      _default:
        host:
          _desc: Hostname or IP address of the network.
          _type: str
        port:
          _desc: Port number that the server is listening on.
          _type: int
          _default: 6697
        ssl:
          _desc: |
            Settings controlling whether or not encrypted connections are used, and server-specific
            options for encrypted connections.
          _type: dict
          _default:
            use_ssl:
              _desc: Whether or not to use encrypted connections when connecting to the server.
              _type: bool
              _default: y
            verify_peer:
              _desc: |
                If set, try to verify the server certificate of the remote side to ensure it is valid and
                chains to a trusted Certificate Authority (CA). Certificates whose fingerprints are listed in
                trusted_fingerprints will also verify successfully even if they don't chain to a trusted CA
                so long as they pass all other validation checks (e.g. not revoked or expired).
              _type: bool
              _default: y
            trusted_fingerprints:
              _desc: |
                List of trusted server fingerprints. If the server certificate does not chain to a trusted CA,
                it is preferable to configure the fingerprints here rather than disabling verification.
                Fingerprints must be hashed with SHA-256. If configured, it will look like so:

                <pre>
                trusted_fingerprints:
                  - 8E:9C:A8:DA:8C:1A:3A:BC:29:B1:36:57:6B:F6:9C:9D:4E:51:F0:2B:D4:B0:56:C7:14:53:3F:90:D3:0B:71:63
                </pre>

                To obtain a fingerprint, run the following command, replacing "chat.freenode.net:6697"
                with correct values for your host and port number.

                <pre>
                openssl s_client -connect chat.freenode.net:6697 < /dev/null 2>/dev/null | openssl x509 -fingerprint -sha256 -noout -in /dev/stdin
                </pre>
              _type: list
              _default: []
              _items:
                _type: str
    authentication:
      _desc: Authentication settings for the network or services.
      _type: dict
      _default:
        server:
          _desc: |
            Server authentication via the PASS command, such as if a connection password is required.
            If unset, we may send the services username and password via the PASS command if SASL is disabled,
            depending on the services and ircd modules in use.
          _type: dict
          _default:
            password:
              _desc: Server connection password.
              _type:
                - str
                - null
              _default: ~
        services:
          _desc: |
            Services authentication. We support sending regular IDENTIFY commands to NickServ (or equivalent)
            and support both SASL PLAIN (password-based auth) and SASL EXTERNAL (client certificate auth).
          _type: dict
          _default:
            module:
              _desc: |
                What services package is in use by the network. We may vary how we send authentication details
                and how we recover an in-use nickname based on this selection. Configuring this wrong may have
                disastrous consequences.
              _type: enum
              _values:
                - anope
                - atheme
                - undernet
            username:
              _desc: |
                Username to log into services with, if the services module supports usernames different from the
                current nick. If unset, uses the configured nick in the user settings.
              _type:
                - str
                - null
              _default: ~
            password:
              _desc: Password to log into services with. Leave unset if using client certificate authentication.
              _type:
                - str
                - null
              _default: ~
            use_sasl:
              _desc: |
                Whether or not to use SASL to authenticate. It is recommended to enable this if the network
                supports SASL, to ensure that the bot is fully authenticated before joining any channels.
              _type: bool
              _default: y
            client_certificate:
              _desc: |
                Client certificate to connect with, in PEM format. You may either have this be a filename containing
                the certificate or directly embed the certificate in this configuration file (use the "|" multiline format).
                The private key may be optionally present in PEM format after the certificate. Leave unset if using
                password authentication.
              _type:
                - str
                - null
              _default: ~
            client_key:
              _desc: |
                Private key to connect with, in PEM format, if it was not already specified in client_certificate.
                This may be either a filename containing the key or directly embedded in this configuration file
                (use the "|" multiline format). Leave unset if using password authentication or if the private key
                is already present as part of the client_certificate configuration value.
              _type:
                - str
                - null
              _default: ~

transports.irc.channel:
  _desc: |
    Channels can generally be specified as simple strings, but sometimes more advanced configuration is needed
    under special circumstances. In those cases, you may specify this channel object instead of a string.
  _type: dict
  _default:
    name:
      _desc: Channel name, be sure to surround with quotes so it is not interpreted as a comment!
      _type: str
    key:
      _desc: Channel key, if the channel is password protected (channel mode +k).
      _type:
        - str
        - null
      _default: ~
    prefix:
      _desc: |
        If specified, messages will be sent to this prefix for this channel (e.g. "voice message").
        This typically requires that STATUSMSG be supported by the ircd.
      _type:
        - str
        - null
      _default: ~

ssl:
  _desc: SSL settings that apply to all connections made by the bot.
  _type: dict
  _default:
    ca_file:
      _desc: Path to a file containing all trusted Certificate Authorities (CAs). If unset, use system default.
      _type:
        - str
        - null
      _default: ~
    ciphers:
      _desc: |
        All ciphers that the bot will make use of. By default, we track Mozilla's "intermediate" compatibility list:
        https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28default.29
      _type: str
      _default: ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384

access:
  _desc: |
    The access section defines shorthand notation "templates" for collections of flags as well as allows
    you to define a list of accounts who have access to the bot. In addition to this section, access can be granted
    to accounts via the fflags command. Access granted via the command is stored in the database rather than the
    configuration file, and the command is unable to modify or delete entries present in the file.
  _type: dict
  _default:
    templates:
      _desc: |
        Templates are a way to associate a friendly name with a collection of flags. By default, three templates
        are defined:
        * owner: full access to the bot and can execute every command
        * admin: access to manage moderators and execute commands which can update the bot's code or cause it to restart
        * moderator: manage games in progress and warn users, but cannot manage access entries or cause the bot to restart
      _type: list
      _default:
        - name: owner
          flags: AaDdFfgjmNpSsw
        - name: admin
          flags: AaDdfgjmNpSsw
        - name: moderator
          flags: AadfgjmNpSsw
      _items:
        _type: access.template
    entries:
      _desc: List of accounts with access to the bot.
      _type: list
      _default: []
      _items:
        _type: access.entry

access.template:
  _desc: A template associates a friendly name with a collection of flags.
  _type: dict
  _default:
    name:
      _desc: Name of the template, must be unique.
      _type: str
    flags:
      _desc: Flags that this template grants. For readability, it is recommended to list them in alphabetical order.
      _type: str

access.entry:
  _desc: |
    An access entry associates an account on a given transport with an access template. Unlike the fflags command,
    access entries in the configuration file must be associated with a template, and cannot be a freeform collection
    of flags.
  _type: dict
  _default:
    transport:
      _desc: Transport name that the account being granted access is on.
      _type: str
    account:
      _desc: Account name being granted access.
      _type: str
    template:
      _desc: Access template to grant to the account.
      _type: str

logging:
  _type: dict
  _default:
    groups:
      _type: list
      _default:
        - name: admin-commands
          commands: "*"
        - name: warnings
          commands:
            - fwarn add
            - fwarn set
            - fwarn del
        - name: debug
          exceptions: "*"
      _items:
        _type: logging.group
    logs:
      _type: list
      _default: []
      _items:
        _type: logging.log

logging.group:
  _type: dict
  _default:
    name:
      _type: str
    commands:
      _type:
        - list
        - str
      _default: []
      _items:
        _type: str
    exceptions:
      _type:
        - list
        - str
      _default: []
      _items:
        _type: str

gameplay:
  _type: dict
  _default:
    language:
      _type: str
      _default: en
    gif_chance:
      _type: float
      default: 0.02
    nightchat:
      _type: bool
      _default: y
    deadchat:
      _type: bool
      _default: y
    wolfchat:
      _type: dict
      _default:
        disable_day:
          _type: bool
          _default: n
        disable_night:
          _type: bool
          _default: n
        only_kill_command:
          _type: bool
          _default: n
        only_same_command:
          _type: bool
          _default: n
        wolves_only_chat:
          _type: bool
          _default: n
        no_interaction:
          _type: bool
          _default: n
        remove_non_wolves:
          _type: bool
          _default: n
        traitor_non_wolf:
          _type: bool
          _default: n
    spectate:
      _type: dict
      _default:
        notice:
          _type: bool
          _default: y
        include_user:
          _type: bool
          _default: y
    disable:
      _type: dict
      _default:
        roles:
          _type: list
          _default: []
          _items:
            _type: str
        gamemodes:
          _type: list
          _default: []
          _items:
            _type: str
        commands:
          _type: list
          _default: []
          _items:
            _type: str

ratelimits:
  _type: dict
  _default:
    admins:
      _type: int
      _default: 300
    gamestats:
      _type: int
      _default: 0
    goat:
      _type: int
      _default: 300
    playerstats:
      _type: int
      _default: 0
    rolestats:
      _type: int
      _default: 0
    start:
      _type: int
      _default: 10
    stats:
      _type: int
      _default: 60
    time:
      _type: int
      _default: 10
    votes:
      _type: int
      _default: 60
    wait:
      _type: int
      _default: 10

timers:
  _type: dict
  _default:
    join:
      _type: int
      _default: 3600
    night:
      _type: dict
      _default:
        limit:
          _type: int
          _default: 120
        warn:
          _type: int
          _default: 60
    day:
      _type: dict
      _default:
        limit:
          _type: int
          _default: 720
        warn:
          _type: int
          _default: 600
    shortday:
      _type: dict
      _default:
        players:
          _type: int
          _default: 6
        limit:
          _type: int
          _default: 520
        warn:
          _type: int
          _default: 400
    wait:
      _type: dict
      _default:
        initial:
          _type: int
          _default: 60
        join:
          _type: int
          _default: 25
        command:
          _type: dict
          _default:
            amount:
              _type: int
              _default: 30
            tokenbucket:
              _type: dict
              _default:
                initial:
                  _type: int
                  _default: 2
                refill:
                  _type: int
                  _default: 240
                maximum:
                  _type: int
                  _default: 3

reaper:
  _type: dict
  _default:
    idle:
      _type: dict
      _default:
        warn:
          _type: dict
          _default:
            channel:
              _type: int
              _default: 180
            private:
              _type: int
              _default: 240
        grace:
          _type: int
          _default: 300
        points:
          _type: int
          _default: 1
        expiration:
          _type: str
          _default: 30d
    part:
      _type: dict
      _default:
        grace:
          _type: int
          _default: 30
        points:
          _type: int
          _default: 1
        expiration:
          _type: str
          _default: 30d
    quit:
      _type: dict
      _default:
        grace:
          _type: int
          _default: 60
        points:
          _type: int
          _default: 1
        expiration:
          _type: str
          _default: 30d
    account:
      _type: dict
      _default:
        grace:
          _type: int
          _default: 30
        points:
          _type: int
          _default: 1
        expiration:
          _type: str
          _default: 30d

warnings:
  _type: dict
  _default:
    restrict_fstasis:
      _type: bool
      _default: y
    sanctions:
      _type: list
      _merge: replace
      _default:
        - min: 4
          max: 6
          stasis: 1
        - min: 7
          max: 11
          scalestasis:
            a: 0
            b: 1
            c: -4
        - min: 12
          max: 12
          tempban: 6
      _items:
        _type: warnings.sanction

warnings.sanction:
  _type: dict
  _default:
    min:
      _type: int
    max:
      _type: int
    stasis:
      _type:
        - int
        - null
      _default: ~
    scalestasis:
      _type:
        - warnings.sanction.scalestasis
        - null
      _default: ~
    tempban:
      _type:
        - int
        - str
        - null
      _default: ~
    deny:
      _type:
        - list
        - null
      _default: ~
      _items:
        _type: str

warnings.sanction.scalestasis:
  _type: dict
  _default:
    a:
      _type: int
      _default: 0
    b:
      _type: int
      _default: 1
    c:
      _type: int
      _default: 0

debug:
  _type: dict
  _default:
    disable:
      _type: dict
      _default:
        timers:
          _type: bool
          _default: y
        timelord:
          _type: bool
          _default: n
        reaper:
          _type: bool
          _default: y
        stasis:
          _type: bool
          _default: y
    messages:
      _type: dict
      _default:
        nothrow:
          _type: bool
          _default: y
